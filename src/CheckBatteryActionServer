#! /usr/bin/env python3
from random import randint

import rospy
import actionlib

from geometry_msgs.msg import Pose
import sensor_msgs.msg as sensor_msgs

from multi_turtlebot3.msg import CheckBatteryAction
from multi_turtlebot3.msg import CheckBatteryGoal
from multi_turtlebot3.msg import CheckBatteryFeedback
from multi_turtlebot3.msg import CheckBatteryResult

from battery_mockup.srv import *

battery_level_cutoffs = [0.33, 0.66]

class CheckBatteryActionServer(object):
    def __init__(self, name):
        # create messages that are used to publish feedback/result
        self._feedback = CheckBatteryFeedback()
        self._result = CheckBatteryResult()
        self._ns = rospy.get_namespace()
        self._action_name = name
        self._as = actionlib.SimpleActionServer(self._action_name, CheckBatteryAction, execute_cb=self.execute_cb, auto_start = False)

        self._as.start()
        rospy.set_param('~battery_level', "high")

    def execute_cb(self, goal):
        # helper variables
        r = rospy.Rate(1)

        rospy.loginfo('%s will check its battery' % (self._ns))

        battery_service_name = self._ns+"check_percentage"

        rospy.wait_for_service(battery_service_name)

        check_percentage = rospy.ServiceProxy(battery_service_name, CheckPercentage)

        response = check_percentage(0)

        battery_percentage = response.percentage

        current_bat_level = rospy.get_param('~battery_level')

        if (battery_percentage<battery_level_cutoffs[0]):
            if current_bat_level == "medium":
                self._result.result = "low"
            else:
                self._result.result = "medium"
        elif (battery_percentage<battery_level_cutoffs[1]):
            self._result.result = "medium"
        else:
            self._result.result = "high"
        
        rospy.set_param('~battery_level', self._result.result)

        rospy.loginfo('%s: Succeeded - result %s' % (self._action_name, self._result.result))
        self._as.set_succeeded(self._result)

if __name__ == '__main__':
    rospy.init_node('tb1_Navigate')
    server = CheckBatteryActionServer(rospy.get_name())
    rospy.spin()
